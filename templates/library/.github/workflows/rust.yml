name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

{% if build_c_libs %}
env:
  build-with-pgo: {% if build_c_libs-with-pgo %}true{% else %}false{% endif %}
{%- endif %}

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
{%- if xplat %}
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            {%- if build_c_libs %}
            use-pgo: false # no native runner
            {%- endif %}
            use-cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            {%- if build_c_libs %}
            use-pgo: false # no native runner
            {%- endif %}
            use-cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            {%- if build_c_libs %}
            use-pgo: false # no native runner
            {%- endif %}
            use-cross: false
          - os: macos-13 # x86
            target: x86_64-apple-darwin
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
          - os: macos-14 # M1
            target: aarch64-apple-darwin
            {%- if build_c_libs %}
            use-pgo: true
            {%- endif %}
            use-cross: false
{%- endif %}

    {% raw %}runs-on: ${{ matrix.os }}{% endraw %}

    steps:
      - uses: actions/checkout@v4

{%- if build_c_libs %}

      - name: Build C Libraries and Run Tests
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: {% raw %}${{ github.event.repository.name }}{% endraw %}
          target: {% raw %}${{ matrix.target }}{% endraw %}
          use-pgo: {% raw %}${{ matrix.use-pgo && env.build-with-pgo }}{% endraw %}
          use-cross: {% raw %}${{ matrix.use-cross }}{% endraw %}
          features: "c-exports"
          build-library: true
          run-tests-and-coverage: {% raw %}${{ matrix.target != 'aarch64-pc-windows-msvc' }}{% endraw %}
          codecov-token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}

{%- else %}

      - name: Run Tests and Upload Coverage
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        # Currently unsupported due to no native runner.
        # Native runner currently only available in enterprise.
        if: matrix.target != 'aarch64-pc-windows-msvc'
        with:
          upload-coverage: true
          codecov-token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          target: {% raw %}${{ matrix.target }}{% endraw %}
          use-cross: {% raw %}${{ matrix.use-cross }}{% endraw %}

{%- endif %}
      # Note: The GitHub Runner Images will contain an up to date Rust Stable Toolchain
      #       thus as per recommendation of cargo-semver-checks, we're using stable here.
      #
      # Note to reader. If adding this to a new repo, please clear cache.
      - name: Run cargo-semver-checks
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          SEARCH_RESULT=$(cargo search "^{{project-name}}$" --limit 1)

          if echo "$SEARCH_RESULT" | grep -q "^{{project-name}} "; then
              # Run semver checks on stable, because nightly sometimes gets borked in cargo-semver-checks.
              rustup +stable target add {% raw %}${{ matrix.target }}{% endraw %}
              # Note: binstall is available after devops-rust-test-and-coverage@v1 call
              cargo binstall --no-confirm cargo-semver-checks
              cargo +stable semver-checks --target {% raw %}${{ matrix.target }}{% endraw %} {% if build_c_libs %}--features c-exports{% endif %}
          else
              echo "No previous version found on crates.io. Skipping semver checks."
          fi

{%- if wine %}
  test-on-wine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu, i686-pc-windows-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Run Tests and Coverage on WINE
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          rust-toolchain: nightly
          target: {% raw %}${{ matrix.target }}{% endraw %}
          install-rust-toolchain: true
          setup-rust-cache: true
          upload-coverage: true
          codecov-token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          features: "c-exports"
          use-cross: true
{%- endif %}

{%- if build_c_libs %}

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_cpp.toml
          output-header-file: bindings_cpp.hpp

      - name: Generate C bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_c.toml
          output-header-file: bindings_c.h
{%- endif %}

{%- if build_csharp_libs %}

  build-dotnet-library:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build and Package .NET Wrapper
        uses: Reloaded-Project/devops-rust-c-library-to-dotnet@v1
        with:
          csharp-project-path: bindings/csharp
{%- endif %}

  publish-crate:
    permissions:
      contents: write

    needs: [build-and-test{%- if build_c_libs %},build-c-headers{%- endif %}{%- if build_csharp_libs %},build-dotnet-library{%- endif %}{%- if wine %},test-on-wine{%- endif %}]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Rust Crate and Artifacts  
        uses: Reloaded-Project/devops-publish-action@v1
        {%- if publish_crate_on_tag or build_csharp_libs %}
        with:
          {%- if publish_crate_on_tag %}
          crates-io-token: {% raw %}${{ secrets.CRATES_IO_TOKEN }}{% endraw %}
          {%- endif %}
          {%- if build_csharp_libs %}
          nuget-api-key: {% raw %}${{ secrets.NUGET_KEY }}{% endraw %}
          {%- endif %}
          {%- if publish_crate_on_tag %}
          rust-project-paths: |
            .
          {%- endif %}
        {%- endif %}